//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace AssemblyCSharpEditor.Tests.RandomLevels
{
	using System;
	using RandomLevel;
	using NUnit.Framework;
	[TestFixture]
	public class PathBuildTesting
	{
		[Test]
		[ExpectedException(typeof(System.ArgumentNullException))]
		/// <summary>
		/// Tests if the correct exception is thrown when a null reference
		/// is used in the constructor as SquareGraph.
		/// </summary>
		public void PathBuilderConstructionNullSGTest() {
			new PathBuilder (null, new Coordinate (0, 0));
		}
		[Test]
		[ExpectedException(typeof(System.ArgumentNullException))]
		/// <summary>
		/// Tests if the correct exception is thrown when a null reference
		/// is used in the constructor as Coordinate.
		/// </summary>
		public void PathBuilderConstructionNullCoordTest() {
			new PathBuilder (new SquareGraph(1,1), null);
		}
		[Test]
		/// <summary>
		/// Tests if the first vertex labeled as part of the critical
		/// path is positioned correctly, given the first quadrant is NW.
		/// </summary>
		public void PathBuilderNWFirstTest(){
			SquareGraph square = new SquareGraph (20, 20);
			PathBuilder pb = new PathBuilder (square, new Coordinate (10, 10));
			pb.BuildPath (Quadrant.NORTHWEST);
			Assert.IsTrue (square.GetVertexAtCoordinate (new Coordinate (10, 9)).prop == Property.PARTOFPATH);
		}
		[Test]
		/// <summary>
		/// Tests if the first vertex labeled as part of the critical
		/// path is positioned correctly, given the first quadrant is NE.
		/// </summary>
		public void PathBuilderNEFirstTest(){
			SquareGraph square = new SquareGraph (20, 20);
			PathBuilder pb = new PathBuilder (square, new Coordinate (10, 10));
			pb.BuildPath (Quadrant.NORTHEAST);
			Assert.IsTrue (square.GetVertexAtCoordinate (new Coordinate (9, 10)).prop == Property.PARTOFPATH);
		}
		[Test]
		/// <summary>
		/// Tests if the first vertex labeled as part of the critical
		/// path is positioned correctly, given the first quadrant is SE.
		/// </summary>
		public void PathBuilderSEFirstTest(){
			SquareGraph square = new SquareGraph (20, 20);
			PathBuilder pb = new PathBuilder (square, new Coordinate (10, 10));
			pb.BuildPath (Quadrant.SOUTHEAST);
			Assert.IsTrue (square.GetVertexAtCoordinate (new Coordinate (10, 11)).prop == Property.PARTOFPATH);
		}
		[Test]
		/// <summary>
		/// Tests if the first vertex labeled as part of the critical
		/// path is positioned correctly, given the first quadrant is SW.
		/// </summary>
		public void PathBuilderSWFirstTest(){
			SquareGraph square = new SquareGraph (20, 20);
			PathBuilder pb = new PathBuilder (square, new Coordinate (10, 10));
			pb.BuildPath (Quadrant.SOUTHWEST);
			Assert.IsTrue (square.GetVertexAtCoordinate (new Coordinate (11, 10)).prop == Property.PARTOFPATH);
		}
	}
}

