//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
namespace RandomLevel
{
	public class PathBuilder
	{
		public Coordinate targetCoord { get; private set; }
		private SquareGraph sg;
		private Random random;
		public PathBuilder (SquareGraph graph, Coordinate target)
		{
			if (graph == null) 
			{
				throw new ArgumentNullException("graph");
			}
			if (target == null) 
			{
				throw new ArgumentNullException("target");
			}
			sg = graph;
			targetCoord = target;
			random = new Random (Environment.TickCount);
		}

		/// <summary>
		/// Constructs a path from target to laser.
		/// </summary>
		/// <param name="quad"> The first quadrant.</param>
		public void BuildPath(Quadrant quad) 
		{
			switch (quad) {
			case Quadrant.NORTHWEST: FindPathNorthWest ();
				break;
			case Quadrant.NORTHEAST: FindPathNorthEast ();
				break;
			case Quadrant.SOUTHEAST: FindPathSouthEast ();
				break;
			case Quadrant.SOUTHWEST: FindPathSouthWest ();
				break;
			default: throw new ArgumentException("The specified quadrant was not valid.");
			}
			WallBuilder wallbuild = new WallBuilder ();
			wallbuild.AddRandomWalls(sg);
		}

		/// <summary>
		/// Finds a path, having northwest as the first quadrant.
		/// </summary>
		private void FindPathNorthWest() 
		{
			int randRow = RandInt(0,targetCoord.Row);
			int randCol = RandInt(0,targetCoord.Col);
			int spare;
			PathFromToCol(targetCoord.Row, targetCoord.Col - 1, randCol);
			PathFromToRow(targetCoord.Row, randRow, randCol);
			spare = randCol;
			randCol = RandInt(targetCoord.Col + 1, sg.Maxcol);
			PathFromToCol(randRow, spare, randCol);
			spare = randRow;
			randRow = RandInt(targetCoord.Row+1, sg.Maxrow);
			PathFromToRow(spare, randRow, randCol);
			sg.GetVertexAtCoordinate (new Coordinate (randRow, 0)).Prop = Property.LASER;
			PathFromToCol(randRow, randCol, 1);
		}

		/// <summary>
		/// Finds a path, having northeast as the first quadrant.		
		/// </summary>
		private void FindPathNorthEast() 
		{
			int randRow = RandInt(0,targetCoord.Row);
			int randCol = RandInt(targetCoord.Col + 1, sg.Maxcol);
			int spare;
			PathFromToRow(targetCoord.Row - 1, randRow, targetCoord.Col);
			PathFromToCol(randRow, targetCoord.Col, randCol);
			spare = randRow;
			randRow = RandInt(targetCoord.Row+1, sg.Maxrow);
			PathFromToRow(spare,randRow,randCol);
			spare = randCol;
			randCol = RandInt(0,targetCoord.Col);
			PathFromToCol(randRow,spare,randCol);
			sg.GetVertexAtCoordinate(new Coordinate(0,randCol)).Prop = Property.LASER;
			PathFromToRow(randRow,1,randCol);
		}

		/// <summary>
		/// Finds a path, having southeast as the first quadrant.
		/// </summary>
		private void FindPathSouthEast() 
		{
			int randRow = RandInt(targetCoord.Row + 1, sg.Maxrow);
			int randCol = RandInt(targetCoord.Col + 1, sg.Maxcol);
			int spare;
			PathFromToCol(targetCoord.Row, targetCoord.Col + 1, randCol);
			PathFromToRow(targetCoord.Row, randRow, randCol);
			spare = randCol;
			randCol = RandInt(0,targetCoord.Col);
			PathFromToCol(randRow,spare,randCol);
			spare = randRow;
			randRow = RandInt(0,targetCoord.Row);
			PathFromToRow(randRow,spare,randCol);
			sg.GetVertexAtCoordinate(new Coordinate(randRow,sg.Maxcol-1)).Prop = Property.LASER;
			PathFromToCol(randRow, randCol, sg.Maxcol - 2);
		}

		/// <summary>
		/// Finds a path, having southwest as the first quadrant.
		/// </summary>
		private void FindPathSouthWest() 
		{
			int randRow = RandInt(targetCoord.Row + 1, sg.Maxrow);
			int randCol = RandInt(0,targetCoord.Col);
			int spare;
			PathFromToRow(targetCoord.Row + 1, randRow, targetCoord.Col);
			PathFromToCol(randRow, randCol, targetCoord.Col);
			spare = randRow;
			randRow = RandInt(0,targetCoord.Row);
			PathFromToRow(randRow,spare,randCol);
			spare = randCol;
			randCol = RandInt(targetCoord.Col + 1, sg.Maxcol);
			PathFromToCol(randRow, spare, randCol);
			sg.GetVertexAtCoordinate(new Coordinate(sg.Maxrow-1,randCol)).Prop = Property.LASER;
			PathFromToRow(randRow, sg.Maxrow-2, randCol);
		}

		/// <summary>
		/// Generates a random integer between min and max - 1.
		/// </summary>
		/// <returns>The random integer.</returns>
		/// <param name="min">The minimum value, inclusionary.</param>
		/// <param name="max">The maximum value, exclusionary.</param>
		private int RandInt(int min, int max) 
		{
			return random.Next (min, max);
		}
		/// <summary>
		/// Marks all the vertices on the same Row from the start column
		/// to the end column as part of the critical path.
		/// </summary>
		/// <param name="Row">The Row index.</param>
		/// <param name="initcol">The initial column index.</param>
		/// <param name="endcol">The final column index.</param>
		private void PathFromToCol(int row, int initcol, int endcol) {
			int start = Math.Min (initcol, endcol);
			int end = Math.Max (initcol, endcol);
			for(int i = start; i <= end; i++) 
			{
				sg.GetVertexAtCoordinate (new Coordinate (row, i)).Prop = Property.PARTOFPATH;
			}
		}

		/// <summary>
		/// Marks all the vertices on the same column from the start Row
		/// to the end Row as part of the critical path.
		/// </summary>
		/// <param name="initrow">The initial Row index.</param>
		/// <param name="endrow">The final Row index.</param>
		/// <param name="Col">The column index.</param>
		private void PathFromToRow(int initrow, int endrow, int col) 
		{
			int start = Math.Min (initrow, endrow);
			int end = Math.Max (initrow, endrow);
			for(int i = start; i <= end; i++) 
			{
				sg.GetVertexAtCoordinate(new Coordinate(i,col)).Prop = Property.PARTOFPATH;
			}
		}
	}
}

