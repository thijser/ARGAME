//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
namespace RandomLevel
{
	public class WallBuilder
	{
		private Random r;
		public WallBuilder ()
		{
			r = new Random (Environment.TickCount);
		}
		/// <summary>
		/// Adds walls randomly to the map. The amount of added walls is less
		/// than half the amount of vertices in the map.
		/// </summary>
		public void AddRandomWalls(SquareGraph sg) 
		{
			if (sg == null) {
				throw new ArgumentNullException("The supplied argument should not be null.");
			}
			int max = (int) (sg.maxrow*sg.maxcol*4)/10;
			for(int i = 0; i < max; i++) 
			{
				int randRow = RandInt(0,sg.maxrow);
				int randCol = RandInt(0,sg.maxcol);
				if(sg.GetVertexAtCoords(new Coordinate(randRow, randCol)).prop == Property.EMPTY)
				{
					sg.GetVertexAtCoords (new Coordinate (randRow, randCol)).prop = Property.WALL;
				}
			}
		}
		/// <summary>
		/// Generates a random integer between min and max - 1.
		/// </summary>
		/// <returns>The random integer.</returns>
		/// <param name="min">The minimum value, inclusionary.</param>
		/// <param name="max">The maximum value, exclusionary.</param>
		private int RandInt(int min, int max) 
		{
			return r.Next (min, max);
		}
	}
}

