//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
namespace RandomLevel
{
	public class RandomLevelRenderer : MonoBehaviour
	{
		private SquareGraph sg;
		private Vector3 targetVec;
		public GameObject emitterPrefab, wallPrefab, targetPrefab;
		public int rows, cols;
		public const float ScaleFact = 15f;
		private void Render() 
		{
			for (int i = 0; i < sg.maxrow; i++) 
			{
				for (int j = 0; j < sg.maxcol; j++) 
				{
					Coordinate c = new Coordinate(i,j);
					Vertex v = sg.GetVertexAtCoords(c);
					Vector3 spawnVec = CoordToVector(c) - targetVec;
					InstantiateObject(v,spawnVec);
				}
			}
		}
		Vector3 CoordToVector(Coordinate c) 
		{
			return new Vector3 (c.col*ScaleFact, 0f, c.row*-ScaleFact);
		}
		void InstantiateObject(Vertex v, Vector3 spawnVec)
		{
			if (v.prop == Property.LASER) 
			{
				Instantiate (emitterPrefab, spawnVec, Quaternion.identity);
			} 
			else if (v.prop == Property.WALL) 
			{
				Instantiate (wallPrefab, spawnVec, Quaternion.identity);
			} 
			else if (v.prop == Property.TARGET) 
			{
				Instantiate (targetPrefab, spawnVec, Quaternion.identity);
			}
		}
		void Start() {
			RandomLevelGenerator rlg = new RandomLevelGenerator (rows, cols);
			sg = rlg.ReturnRandomMap ();
			targetVec = CoordToVector (rlg.GetTargetCoord ());
			Render ();
		}
	}
}

