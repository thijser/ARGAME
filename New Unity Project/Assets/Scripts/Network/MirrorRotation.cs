//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Network
{
	using System;
	using System.Collections;
	using UnityEngine;
	public class MirrorRotation : MonoBehaviour
	{
		public Material highlight;
		public Material original;
		private bool selected = false;
		/// <summary>
		/// Updates the location of the cube.
		/// </summary>
		public void Update()
		{
			Rotate();
			if (Input.GetMouseButtonDown(0))
			{
				ResetHighlight();
				selected = false;
				RaycastHit hitInfo = new RaycastHit();
				bool hit = Physics.Raycast(Camera.main.ScreenPointToRay(Input.mousePosition), out hitInfo);
				
				if (hit) 
				{
					if (GetHighestParent (hitInfo.transform) == this.transform)
					{
						selected = true;
						HighlightMirror();
					}
				}
			}

		}
		public Transform GetHighestParent(Transform trans) 
		{
			if (trans == null) 
			{
				throw new ArgumentNullException("trans");
			}
			while (trans.parent != null) 
			{
				trans = trans.parent;
			}
			return trans;
		}
		private void Rotate() 
		{
			if (selected) 
			{
				if(Input.GetKey("right")) 
				{
					float t = Time.deltaTime * -90f;
					transform.Rotate(0, t, 0);
				}
				else if(Input.GetKey("left"))
				{
					float t = Time.deltaTime * 90f;
					transform.Rotate(0, t, 0);
				}
			}
		}
		private void HighlightMirror() 
		{
			MeshRenderer mesh = transform.Find ("MirrorBase").Find("Cube_002").GetComponent<MeshRenderer> ();
			mesh.material = highlight;
		}
		private void ResetHighlight() 
		{
			MeshRenderer mesh = transform.Find ("MirrorBase").Find("Cube_002").GetComponent<MeshRenderer> ();
			mesh.material = original;
		}
		void OnSerializeNetworkView(BitStream stream, NetworkMessageInfo info)
		{
			Quaternion syncPosition = Quaternion.identity;
			if (stream.isWriting)
			{
				syncPosition = transform.rotation;
				stream.Serialize(ref syncPosition);
			}
			else
			{
				stream.Serialize(ref syncPosition);
				transform.rotation = syncPosition;
			}
		}
	}
}

